services:
  chain_command.logger_formatter:
    class: Monolog\Formatter\LineFormatter
    arguments:
      - "[%%datetime%%] %%level_name%%: %%message%%\n"

  chain_command.logger_handler:
    class: Monolog\Handler\StreamHandler
    arguments: [%kernel.logs_dir%/chain_command.log, 200]
    calls:
      - [setFormatter, ['@chain_command.logger_formatter']]

  chain_command.logger:
    class: Symfony\Bridge\Monolog\Logger
    arguments: [chain_command]
    calls:
      - [pushHandler, ['@chain_command.logger_handler']]

  chain_command.service:
    class: ChainCommandBundle\Services\ChainCommandService
    arguments: ['@chain_command.logger']

  # Used for buffering output of commands which belong to chain, so we will be able logging their output.
  chain_command.pre_execute:
    class: ChainCommandBundle\Listeners\PreExecuteCommand
    arguments: ['@chain_command.service', '@chain_command.logger']
    calls:
      - [setContainer, ["@service_container"]]
    tags:
      - { name: kernel.event_listener, event: console.command, priority: 2 }

  # Used for fetching of buffered and logging output after command was executed
  chain_command.command_terminate:
    class: ChainCommandBundle\Listeners\TerminateCommand
    arguments: ['@chain_command.service', '@chain_command.logger']
    calls:
      - [setContainer, ["@service_container"]]
    tags:
      - { name: kernel.event_listener, event: console.terminate }